{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Length","title","changeTime","type","time","formatTime","className","onClick","App","useState","displayTime","setDisplayTime","breakTime","setBreakTime","sessionTime","setSessionTime","timerOn","setTimerOn","onBreak","setOnBreak","playSound","Sound","currentTime","play","min","Math","trunc","sec","amount","prev","audio1","Audio","audio2","duration","onBreakVariable","interval","setInterval","localStorage","clear","setItem","clearInterval","getItem","controlTime","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMA6GA,SAASA,EAAT,GAA6D,IAA5CC,EAA2C,EAA3CA,MAAOC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,WAC9C,OACE,gCACE,6BAAKJ,IACL,sBAAKK,UAAU,YAAf,UACE,wBAAQC,QAAS,kBAAIL,GAAY,GAAIC,IAAOG,UAAU,0BAAtD,SACE,mBAAGA,UAAU,iBAAb,8BAEF,6BAAKD,EAAWD,KAChB,wBAAQG,QAAS,kBAAIL,EAAW,GAAIC,IAAOG,UAAU,0BAArD,SACE,mBAAGA,UAAU,iBAAb,kCAOKE,MA1Hf,WAEE,MAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAkCF,mBAAS,KAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KACA,EAA8BR,oBAAS,GAAvC,mBAAOS,EAAP,KAAgBC,EAAhB,KAGMC,EAAY,SAACC,GACjBA,EAAMC,YAAc,EACpBD,EAAME,QAGFlB,EAAa,SAACD,GAClB,IAAIoB,EAAMC,KAAKC,MAAMtB,EAAO,IACxBuB,EAAMvB,EAAO,GACjB,OACGoB,EAAM,GAAK,IAAMA,EAAMA,GAAO,KAC9BG,EAAM,GAAK,IAAMA,EAAMA,IAItBzB,EAAa,SAAC0B,EAAQzB,GAC1B,GAAY,UAATA,EAAiB,CAClB,GAAIS,GAAa,GAAKgB,EAAS,EAC7B,OAEFf,GAAa,SAACgB,GAAD,OAAUA,EAAOD,SACzB,CACL,GAAId,GAAe,GAAKc,EAAS,EAC/B,OAEFb,GAAe,SAACc,GAAD,OAAUA,EAAOD,KAC1BZ,GACJL,EAAeG,EAAcc,KA0CnC,OACE,sBAAKtB,UAAU,oBAAf,UACE,8CAEA,sBAAKA,UAAU,iBAAf,UACE,cAACN,EAAD,CAAQC,MAAO,eAAgBC,WAAYA,EAAYC,KAAM,QAASC,KAAMQ,EAAWP,WAAYA,IACnG,cAACL,EAAD,CAAQC,MAAO,iBAAkBC,WAAYA,EAAYC,KAAM,OAAQC,KAAMU,EAAaT,WAAYA,OAGxG,sBAAKC,UAAU,eAAf,UACA,6BAAKY,EAAU,QAAU,YACzB,6BAAKb,EAAWK,KAChB,wBAAQH,QAAS,kBAjDD,WAClB,IAAIuB,EAAS,IAAIC,MAAM,aACnBC,EAAS,IAAID,MAAM,gBACnBE,EAAWvB,EACXwB,EAAkBhB,EACtB,IAAMF,EAAS,CACb,IAAImB,EAAWC,aAAY,WAEzBzB,EADAsB,GAAY,GAERA,GAAY,IAAOC,GACrBd,EAAUU,GACVI,GAAkB,EAClBf,GAAW,GACXc,EAAWrB,EAAY,GACdqB,GAAY,GAAKC,IAC1Bd,EAAUY,GACVE,GAAkB,EAClBf,GAAW,GACXc,EAAWnB,EAAc,KAE1B,KACHuB,aAAaC,QACbD,aAAaE,QAAQ,aAAcJ,GAElCnB,GACDwB,cAAcH,aAAaI,QAAQ,eAErCxB,GAAYD,GAsBa0B,IAAepC,UAAU,0BAAhD,SACGU,EACC,mBAAGV,UAAU,iBAAb,iCAEA,mBAAGA,UAAU,iBAAb,kCAGJ,wBAAQC,QAAS,kBAzBnBI,EAAe,MACfE,EAAa,UACbE,EAAe,OAuBuBT,UAAU,0BAA9C,SACE,mBAAGA,UAAU,iBAAb,8BCzFOqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.745c2ffb.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from \"react\";\n\n\nfunction App() {\n\n  const [displayTime, setDisplayTime] = useState(25 * 60);\n  const [breakTime, setBreakTime] = useState(5 * 60);\n  const [sessionTime, setSessionTime] = useState(25 * 60);\n  const [timerOn, setTimerOn] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n  //const [Sound, setSound] = useState(new Audio(\"/beep-06.mp3\"));\n\n  const playSound = (Sound) => {\n    Sound.currentTime = 0;\n    Sound.play();\n  };\n\n  const formatTime = (time) => {\n    let min = Math.trunc(time / 60);\n    let sec = time % 60;\n    return(\n      (min < 10 ? \"0\" + min : min) + \":\" + \n      (sec < 10 ? \"0\" + sec : sec)\n    );\n  }\n\n  const changeTime = (amount, type) => {\n    if(type === \"break\"){\n      if (breakTime <= 0 && amount < 0){\n        return;\n      }\n      setBreakTime((prev) => prev + amount);\n    } else {\n      if (sessionTime <= 0 && amount < 0){\n        return;\n      }\n      setSessionTime((prev) => prev + amount);\n      if (!(timerOn)){\n        setDisplayTime(sessionTime + amount)\n      }\n    }\n  }\n\n  const controlTime = () => {\n    let audio1 = new Audio(\"/wait.mp3\");\n    let audio2 = new Audio(\"/beep-06.mp3\");\n    let duration = displayTime;\n    let onBreakVariable = onBreak;\n    if (!(timerOn)){\n      let interval = setInterval(()=>{\n        duration -= 1;\n        setDisplayTime(duration);\n        if (duration <= 0 && !(onBreakVariable)){\n          playSound(audio1);\n          onBreakVariable = true;\n          setOnBreak(true);\n          duration = breakTime + 1;\n        } else if (duration <= 0 && onBreakVariable){\n          playSound(audio2);\n          onBreakVariable = false;\n          setOnBreak(false);\n          duration = sessionTime + 1;\n        }\n      }, 1000);\n      localStorage.clear();\n      localStorage.setItem(\"intervalId\", interval);\n    }\n    if(timerOn){\n      clearInterval(localStorage.getItem(\"intervalId\"));\n    }\n    setTimerOn(!timerOn);\n  }\n\n  const resetTime = () => {\n    setDisplayTime(25 * 60);\n    setBreakTime(5 * 60);\n    setSessionTime(25 * 60);\n  }\n\n\n  return (\n    <div className=\"main center-align\">\n      <h3>25 + 5 Clock</h3>\n\n      <div className=\"dual-container\">\n        <Length title={\"Break Length\"} changeTime={changeTime} type={\"break\"} time={breakTime} formatTime={formatTime} />\n        <Length title={\"Session Length\"} changeTime={changeTime} type={\"play\"} time={sessionTime} formatTime={formatTime} />\n      </div>\n\n      <div className=\"grid-session\">\n      <h4>{onBreak ? \"Break\" : \"Session\"}</h4>\n      <h2>{formatTime(displayTime)}</h2>\n      <button onClick={() => controlTime()} className=\"btn-large red lighten-2\">\n        {timerOn ?\n          <i className=\"material-icons\">pause_circle_filled</i>\n          :\n          <i className=\"material-icons\">play_circle_filled</i>\n        }\n      </button>\n      <button onClick={() => resetTime()} className=\"btn-large red lighten-2\">\n        <i className=\"material-icons\">refresh</i>\n      </button>\n      </div>\n\n    </div>\n  );\n}\n\nfunction Length({title, changeTime, type, time, formatTime}){\n  return (\n    <div>\n      <h4>{title}</h4>\n      <div className=\"time-sets\">\n        <button onClick={()=>changeTime(-60, type)} className=\"btn-small red lighten-2\">\n          <i className=\"material-icons\">arrow_downward</i>\n        </button>\n        <h4>{formatTime(time)}</h4>\n        <button onClick={()=>changeTime(60, type)} className=\"btn-small red lighten-2\">\n          <i className=\"material-icons\">arrow_upward</i>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}